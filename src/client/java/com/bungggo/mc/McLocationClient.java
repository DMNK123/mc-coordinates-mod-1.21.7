package com.bungggo.mc;

import net.fabricmc.api.ClientModInitializer;
import net.fabricmc.fabric.api.client.rendering.v1.HudRenderCallback;
import net.minecraft.client.render.*;
import net.minecraft.client.gui.DrawContext;
import net.minecraft.client.MinecraftClient;
import net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;
import net.minecraft.client.option.KeyBinding;
import net.minecraft.client.util.InputUtil;
import org.lwjgl.glfw.GLFW;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientTickEvents;
import static net.fabricmc.fabric.api.client.command.v2.ClientCommandManager.literal;
import net.fabricmc.fabric.api.client.command.v2.ClientCommandRegistrationCallback;
import net.fabricmc.fabric.api.client.networking.v1.ClientPlayConnectionEvents;
import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientLifecycleEvents;
import com.bungggo.mc.storage.LocationDataStorage;

public class McLocationClient implements ClientModInitializer {
    private static final Logger LOGGER = LoggerFactory.getLogger("mc-location");

    private static final KeyBinding saveLocationKey = KeyBindingHelper.registerKeyBinding(new KeyBinding(
            "key.mc-location.save_location",
            InputUtil.Type.KEYSYM,
            GLFW.GLFW_KEY_G,
            "category.mc-location"
    ));

    // „É¶„Éº„Ç∂„ÉºË≠òÂà•Â≠ê„Å´Âü∫„Å•„Åè LocationDataStorage „ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ
    private static LocationDataStorage storage;

    private String savedMessage = "";
    private long messageDisplayTick = 0;
    private static final float MESSAGE_DURATION_TICKS = 40.0f; // 40 tick = 2Áßí (20 tick/sec)
    private boolean showListOnCommand = false;

    @Override
    public void onInitializeClient() {
        // „Ç≥„Éû„É≥„ÉâÁôªÈå≤: /ml „Åß„É™„Çπ„ÉàË°®Á§∫„Çí„Éà„Ç∞„É´
        ClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -> {
            dispatcher.register(literal("ml")
                    .executes(context -> {
                        MinecraftClient client = MinecraftClient.getInstance();
                        client.execute(() -> {
                            LOGGER.info("LocationListScreen requested via command");
                            // „Ç≥„Éû„É≥„ÉâÂÆüË°åÊôÇ„Å´„ÉÅ„É£„ÉÉ„Éà„Å™„Å©„ÅÆ„Çπ„ÇØ„É™„Éº„É≥„ÇíÈñâ„Åò„Çã
                            client.setScreen(null);
                            // Ê¨°„ÅÆ tick „Åß LocationListScreen „ÇíË°®Á§∫„Åô„Çã„Åü„ÇÅ„ÅÆ„Éï„É©„Ç∞„Çí ON
                            showListOnCommand = true;
                        });
                        return 1;
                    }));
        });

        // Tick „Ç§„Éô„É≥„Éà: Ê¨°„ÅÆ„ÉÜ„Ç£„ÉÉ„ÇØ„Åß LocationListScreen „ÇíË°®Á§∫
        ClientTickEvents.END_CLIENT_TICK.register(client -> {
            if (showListOnCommand && client.player != null && client.currentScreen == null) {
                showListOnCommand = false;
                LOGGER.info("Showing LocationListScreen via tick (command)");
                client.setScreen(new LocationListScreen());
            }
        });
        ClientTickEvents.END_CLIENT_TICK.register(this::onEndTick);
        HudRenderCallback.EVENT.register(this::onHudRender);

        // „É≠„Ç∞„Ç§„É≥ÊôÇ„Å´„É¶„Éº„Ç∂„ÉºË≠òÂà•Â≠ê„Åã„Çâ storage „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÁîüÊàê„Åó„ÄÅ„Éá„Éº„Çø„Çí„É≠„Éº„Éâ
        ClientPlayConnectionEvents.JOIN.register((handler, sender, client) -> {
            if (client.player != null) {
                String userId = client.player.getUuidAsString();
                LOGGER.info("„ÉØ„Éº„É´„Éâ„Å´„É≠„Ç∞„Ç§„É≥„Åó„Åü„ÅÆ„Åß„Éá„Éº„Çø„Çí„É≠„Éº„Éâ„Åó„Åæ„Åô„ÄÇuserId: {}", userId);
                storage = new LocationDataStorage(userId);
                storage.load();
            }
        });

        // „É≠„Ç∞„Ç¢„Ç¶„ÉàÊôÇ„Å´ storage „Åã„Çâ‰øùÂ≠òÂá¶ÁêÜ„ÇíÂÆüÊñΩ
        ClientPlayConnectionEvents.DISCONNECT.register((handler, client) -> {
            LOGGER.info("„ÉØ„Éº„É´„Éâ„Åã„Çâ„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åü„ÅÆ„Åß„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åô„ÄÇ");
            if (storage != null) {
                storage.save();
                storage = null;
            }
        });
        
        // „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÁµÇ‰∫ÜÊôÇ„Å´‰øùÂ≠òÔºà„Ç§„É≥„Çπ„Çø„É≥„Çπ„Åå„ÅÇ„Çå„Å∞Ôºâ
        ClientLifecycleEvents.CLIENT_STOPPING.register(client -> {
            LOGGER.info("„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÁµÇ‰∫ÜÊôÇ„Å´„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åô„ÄÇ");
            if (storage != null) {
                storage.save();
            }
        });
    }

    private void onEndTick(MinecraftClient client) {
        while (saveLocationKey.wasPressed()) {
            if (client.player == null) {
                return;
            }
            double x = client.player.getX();
            double y = client.player.getY();
            double z = client.player.getZ();
            String locationText = String.format("X: %.1f, Y: %.1f, Z: %.1f", x, y, z);

            LOGGER.info("Location saved: " + locationText);
            LocationDataManager.addEntry(new LocationEntry(locationText));
            savedMessage = "Location saved!";
            if (client.world != null) {
                messageDisplayTick = client.world.getTime();
            } else {
                messageDisplayTick = System.currentTimeMillis() / 50;
            }
        }
    }

    private void onHudRender(DrawContext context, RenderTickCounter tickCounter) {
        MinecraftClient client = MinecraftClient.getInstance();
        if (client.player != null) {
            double x = client.player.getX();
            double y = client.player.getY();
            double z = client.player.getZ();
            String locationText = String.format("X: %.1f, Y: %.1f, Z: %.1f", x, y, z);
            context.drawText(client.textRenderer, locationText, 1, 1, 0xFFFFFF, true);

            if (LocationDataManager.hasPinnedEntries()) {
                int yOffset = 20;
                for (LocationEntry pos : LocationDataManager.getPinnedEntries()) {
                    context.drawText(client.textRenderer, "üìå" + pos.text, 1, yOffset, 0xFFFFFF, true);
                    yOffset += 10;
                }
            }

            // tick„Éô„Éº„Çπ„ÅÆ„Éï„Çß„Éº„Éâ„Ç¢„Ç¶„ÉàÂá¶ÁêÜ
            if (!savedMessage.isEmpty() && client.world != null) {
                long currentTick = client.world.getTime();
                float elapsedTicks = ((float) (currentTick - messageDisplayTick)) + tickCounter.getTickDelta(true);
                if (elapsedTicks < MESSAGE_DURATION_TICKS) {
                    int alpha = (int) (255 * (1 - (elapsedTicks / MESSAGE_DURATION_TICKS)));
                    if (alpha > 10) {
                        int color = (alpha << 24) | 0xFFFFFF;
                        context.drawText(client.textRenderer, savedMessage, 1, 10, color, true);
                    }
                } else {
                    savedMessage = "";
                    messageDisplayTick = 0;
                }
            }
        }
    }
} 