# Automatically create a new release when triggered manually.
# This workflow handles:
# 1. Removing SNAPSHOT from version
# 2. Building the project
# 3. Creating a GitHub release with the built JAR
# 4. Incrementing version and adding SNAPSHOT suffix

name: release

on:
  workflow_dispatch:

# 権限セクションを追加
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      
      - name: setup jdk 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'microsoft'
      
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew
      
      - name: configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: extract current version
        id: version
        run: |
          MOD_VERSION=$(grep "mod_version" gradle.properties | cut -d'=' -f2)
          RELEASE_VERSION=${MOD_VERSION%-SNAPSHOT}
          echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=v${RELEASE_VERSION}" >> $GITHUB_OUTPUT
      
      - name: update version for release
        run: |
          sed -i "s/mod_version=.*/mod_version=${{ steps.version.outputs.release_version }}/" gradle.properties
      
      - name: build project
        run: ./gradlew build
      
      - name: commit release version
        run: |
          git add gradle.properties
          git commit -m "release version to ${{ steps.version.outputs.release_version }}"
      
      - name: create tag
        run: |
          git tag -a ${{ steps.version.outputs.tag_name }} -m "MC Coordinates ${{ steps.version.outputs.release_version }} Release"
      
      - name: calculate next version
        id: next_version
        run: |
          RELEASE_VERSION="${{ steps.version.outputs.release_version }}"
          # Split version string safely
          if [[ "$RELEASE_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            NEXT_PATCH=$((PATCH + 1))
            NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-SNAPSHOT"
            echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Error: Version format unexpected: $RELEASE_VERSION"
            exit 1
          fi
      
      - name: prepare next development version
        run: |
          sed -i "s/mod_version=.*/mod_version=${{ steps.next_version.outputs.next_version }}/" gradle.properties
          git add gradle.properties
          git commit -m "[skip ci] prepare for next development iteration"
      
      - name: push changes
        run: |
          git push origin ${{ steps.version.outputs.tag_name }}
          git push origin main
      
      - name: create github release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: Release ${{ steps.version.outputs.release_version }}
          draft: false
          prerelease: false
          files: build/libs/mc-coordinates-*.jar
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Set Minecraft Version from gradle.properties
        id: get_minecraft_version
        run: |
          version=$(grep '^minecraft_version=' gradle.properties | cut -d'=' -f2)
          echo "MINECRAFT_VERSION=${version}" >> $GITHUB_ENV
          echo "Detected Minecraft version: ${version}"

      - name: Publish to CurseForge
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          curseforge-id: ${{ secrets.CURSEFORGE_PROJECT_ID }}
          curseforge-token: ${{ secrets.CURSEFORGE_TOKEN }}
          
          version: ${{ steps.version.outputs.tag_name }}
          version-type: release
          
          loaders: fabric
          game-versions: ${{ env.MINECRAFT_VERSION }}
          java: ${{ env.JAVA_VERSION }}